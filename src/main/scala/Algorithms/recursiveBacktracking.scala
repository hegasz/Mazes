package algorithms

import buildingBlocks._
import Direction._
import scala.util.Random

import mazeDebugging.mazeToString

object RecursiveBacktracking{

    /** Generates a random maze using recursive backtracking.
     *  @param size maze dimensions as (width, height)
     *  @return a random maze generated by recursive backtracking */
    def RecursiveBacktrackingMazeBuilder(size: Size): Maze = {

        // note inverted x and y in tabulate call
        val grid: Grid = Array.tabulate[Set[Direction]](size._2,size._1)((_,_) => Set())
        visitNextFrom(Point(0,0), grid, size)
        val maze: Maze = Maze(grid, size)
        return maze
    }

    def visitNextFrom(point1: Point, grid: Grid, size: Size): Unit = {
        val directions: Array[Direction] = Array(N,E,S,W)
        val randomDirections = scala.util.Random.shuffle(directions)
        for(direction <- randomDirections){
            var point2 = move(point1, direction)
            // if point is valid and has not been visited yet
            if(isWithin(point2, size) && grid(point2.y)(point2.x).isEmpty){
                grid(point1.y)(point1.x) += direction
                grid(point2.y)(point2.x) += opposite(direction)
                visitNextFrom(point2, grid, size)
            }
        }
    }

    def main(args:Array[String]):Unit = {
        println(mazeToString(RecursiveBacktrackingMazeBuilder(33,15)))
    }
}
